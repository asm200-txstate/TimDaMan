{"ast":null,"code":"var _jsxFileName = \"/Users/axelsm/Desktop/Fall23/Software Engineering/react_trivia_app/src/hooks/ChatGPT.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const CHATGPT_API_URL = 'https://api.openai.com/v1/chat/completions'; \n\n// require('dotenv').config();\n// const apiKey = process.env.API_KEY;\n\n// const ChatGPT = () => {\n//   const [userInput, setUserInput] = useState('');\n//   const [chatGPTResponse, setChatGPTResponse] = useState('');\n\n//   const generateChatGPTResponse = async () => {\n//     try{\n//         const response = await axios.post(\n//             CHATGPT_API_URL,\n//             {\n//                 model: 'gpt-3.5-turbo', \n//                 messages: [\n//                 { role: 'system', content: 'You are a helpful assistant.',},\n//                 { role: 'user', content: userInput, },\n//               ],\n//             }, {\n//                 headers: {\n//                     'Content-Type' : 'appllication/json',\n//                     'Authorization' : apiKey,\n//                 },\n//                 resolve: {\n//                     fallback: {\n//                       \"path\": require.resolve(\"path-browserify\"),\n//                       \"os\": require.resolve(\"os-browserify/browser\"),\n//                       \"crypto\": require.resolve(\"crypto-browserify\")\n//                     }\n//                 },\n//             },\n//         );\n//         setChatGPTResponse(response.data.choices[0].message.content);\n//     } catch (error){\n//         console.error('Error generating ChatGPT response:', error.response ? error.response.data : error.message);\n//     }\n//   }\n\n//   return (\n//     <div>\n//       <h1>ChatGPT React Example</h1>\n//       <div>\n//         <label>User Input:</label>\n//         <input\n//           type=\"text\"\n//           value={userInput}\n//           onChange={(e) => setUserInput(e.target.value)}\n//         />\n//       </div>\n//       <button onClick={generateChatGPTResponse}>Generate Response</button>\n//       <div>\n//         <h3>ChatGPT Response:</h3>\n//         <p>{chatGPTResponse}</p>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatGPT;\n\nimport React, { useState } from 'react';\nimport openai from 'openai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nrequire('dotenv').config();\nconst apiKey = process.env.API_KEY; // Make sure you have your API key stored in an environment variable\n\nconst ChatGPT = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [chatGPTResponse, setChatGPTResponse] = useState('');\n  const generateChatGPTResponse = async () => {\n    try {\n      const gpt = new openai.ChatCompletion({\n        apiKey,\n        model: 'gpt-3.5-turbo'\n      });\n      const prompt = [{\n        role: 'system',\n        content: 'You are a helpful assistant.'\n      }, {\n        role: 'user',\n        content: userInput\n      }];\n      const response = await gpt.create(prompt);\n      setChatGPTResponse(response.choices[0].message.content);\n    } catch (error) {\n      console.error('Error generating ChatGPT response:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ChatGPT React Example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"User Input:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateChatGPTResponse,\n      children: \"Generate Response\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"ChatGPT Response:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: chatGPTResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatGPT, \"v5QNjhZuff+1iUqHUY41VsQWtLE=\");\n_c = ChatGPT;\nexport default ChatGPT;\nvar _c;\n$RefreshReg$(_c, \"ChatGPT\");","map":{"version":3,"names":["React","useState","openai","jsxDEV","_jsxDEV","require","config","apiKey","process","env","API_KEY","ChatGPT","_s","userInput","setUserInput","chatGPTResponse","setChatGPTResponse","generateChatGPTResponse","gpt","ChatCompletion","model","prompt","role","content","response","create","choices","message","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/axelsm/Desktop/Fall23/Software Engineering/react_trivia_app/src/hooks/ChatGPT.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const CHATGPT_API_URL = 'https://api.openai.com/v1/chat/completions'; \n\n// require('dotenv').config();\n// const apiKey = process.env.API_KEY;\n\n// const ChatGPT = () => {\n//   const [userInput, setUserInput] = useState('');\n//   const [chatGPTResponse, setChatGPTResponse] = useState('');\n\n//   const generateChatGPTResponse = async () => {\n//     try{\n//         const response = await axios.post(\n//             CHATGPT_API_URL,\n//             {\n//                 model: 'gpt-3.5-turbo', \n//                 messages: [\n//                 { role: 'system', content: 'You are a helpful assistant.',},\n//                 { role: 'user', content: userInput, },\n//               ],\n//             }, {\n//                 headers: {\n//                     'Content-Type' : 'appllication/json',\n//                     'Authorization' : apiKey,\n//                 },\n//                 resolve: {\n//                     fallback: {\n//                       \"path\": require.resolve(\"path-browserify\"),\n//                       \"os\": require.resolve(\"os-browserify/browser\"),\n//                       \"crypto\": require.resolve(\"crypto-browserify\")\n//                     }\n//                 },\n//             },\n//         );\n//         setChatGPTResponse(response.data.choices[0].message.content);\n//     } catch (error){\n//         console.error('Error generating ChatGPT response:', error.response ? error.response.data : error.message);\n//     }\n//   }\n\n//   return (\n//     <div>\n//       <h1>ChatGPT React Example</h1>\n//       <div>\n//         <label>User Input:</label>\n//         <input\n//           type=\"text\"\n//           value={userInput}\n//           onChange={(e) => setUserInput(e.target.value)}\n//         />\n//       </div>\n//       <button onClick={generateChatGPTResponse}>Generate Response</button>\n//       <div>\n//         <h3>ChatGPT Response:</h3>\n//         <p>{chatGPTResponse}</p>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatGPT;\n\nimport React, { useState } from 'react';\nimport openai from 'openai';\n\nrequire('dotenv').config(); \nconst apiKey = process.env.API_KEY; // Make sure you have your API key stored in an environment variable\n\nconst ChatGPT = () => {\n  const [userInput, setUserInput] = useState('');\n  const [chatGPTResponse, setChatGPTResponse] = useState('');\n\n  const generateChatGPTResponse = async () => {\n    try {\n      const gpt = new openai.ChatCompletion({\n        apiKey,\n        model: 'gpt-3.5-turbo',\n      });\n\n      const prompt = [\n        { role: 'system', content: 'You are a helpful assistant.' },\n        { role: 'user', content: userInput },\n      ];\n\n      const response = await gpt.create(prompt);\n\n      setChatGPTResponse(response.choices[0].message.content);\n    } catch (error) {\n      console.error('Error generating ChatGPT response:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>ChatGPT React Example</h1>\n      <div>\n        <label>User Input:</label>\n        <input\n          type=\"text\"\n          value={userInput}\n          onChange={(e) => setUserInput(e.target.value)}\n        />\n      </div>\n      <button onClick={generateChatGPTResponse}>Generate Response</button>\n      <div>\n        <h3>ChatGPT Response:</h3>\n        <p>{chatGPTResponse}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatGPT;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}