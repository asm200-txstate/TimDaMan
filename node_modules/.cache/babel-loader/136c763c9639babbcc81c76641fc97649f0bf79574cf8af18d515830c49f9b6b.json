{"ast":null,"code":"var _jsxFileName = \"/Users/axelsm/Desktop/Fall23/Software Engineering/react_trivia_app/src/hooks/ChatGPT.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const CHATGPT_API_URL = 'https://api.openai.com/v1/chat/completions'; \n\n// require('dotenv').config();\n// const apiKey = process.env.API_KEY;\n\n// const ChatGPT = () => {\n//   const [userInput, setUserInput] = useState('');\n//   const [chatGPTResponse, setChatGPTResponse] = useState('');\n\n//   const generateChatGPTResponse = async () => {\n//     try{\n//         const response = await axios.post(\n//             CHATGPT_API_URL,\n//             {\n//                 model: 'gpt-3.5-turbo', \n//                 messages: [\n//                 { role: 'system', content: 'You are a helpful assistant.',},\n//                 { role: 'user', content: userInput, },\n//               ],\n//             }, {\n//                 headers: {\n//                     'Content-Type' : 'appllication/json',\n//                     'Authorization' : apiKey,\n//                 },\n//                 resolve: {\n//                     fallback: {\n//                       \"path\": require.resolve(\"path-browserify\"),\n//                       \"os\": require.resolve(\"os-browserify/browser\"),\n//                       \"crypto\": require.resolve(\"crypto-browserify\")\n//                     }\n//                 },\n//             },\n//         );\n//         setChatGPTResponse(response.data.choices[0].message.content);\n//     } catch (error){\n//         console.error('Error generating ChatGPT response:', error.response ? error.response.data : error.message);\n//     }\n//   }\n\n//   return (\n//     <div>\n//       <h1>ChatGPT React Example</h1>\n//       <div>\n//         <label>User Input:</label>\n//         <input\n//           type=\"text\"\n//           value={userInput}\n//           onChange={(e) => setUserInput(e.target.value)}\n//         />\n//       </div>\n//       <button onClick={generateChatGPTResponse}>Generate Response</button>\n//       <div>\n//         <h3>ChatGPT Response:</h3>\n//         <p>{chatGPTResponse}</p>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatGPT;\n\nimport { useState, useEffect } from 'react';\n// import './App.css';\n// import '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"YOUR_API_KEY_HERE\";\nconst ChatGPT = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I'm ChatGPT! Ask me anything!\",\n    sentTime: \"just now\",\n    sender: \"ChatGPT\"\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const handleSendRequest = async message => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n    setIsTyping(true);\n    try {\n      var _response$choices$, _response$choices$$me;\n      const response = await processMessageToChatGPT([...messages, newMessage]);\n      const content = (_response$choices$ = response.choices[0]) === null || _response$choices$ === void 0 ? void 0 : (_response$choices$$me = _response$choices$.message) === null || _response$choices$$me === void 0 ? void 0 : _response$choices$$me.content;\n      if (content) {\n        const chatGPTResponse = {\n          message: content,\n          sender: \"ChatGPT\"\n        };\n        setMessages(prevMessages => [...prevMessages, chatGPTResponse]);\n      }\n    } catch (error) {\n      console.error(\"Error processing message:\", error);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  async function processMessageToChatGPT(chatMessages) {\n    const apiMessages = chatMessages.map(messageObject => {\n      const role = messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\";\n      return {\n        role,\n        content: messageObject.message\n      };\n    });\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [{\n        role: \"system\",\n        content: \"I'm a Student using ChatGPT for learning\"\n      }, ...apiMessages]\n    };\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    });\n    return response.json();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"800px\",\n        width: \"700px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MainContainer, {\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            scrollBehavior: \"smooth\",\n            typingIndicator: isTyping ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"ChatGPT is typing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 43\n            }, this) : null,\n            children: messages.map((message, i) => {\n              console.log(message);\n              return /*#__PURE__*/_jsxDEV(Message, {\n                model: message\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Send a Message\",\n            onSend: handleSendRequest\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatGPT, \"/zB3XGTb3fH4sHZ1f5v72vHAi9A=\");\n_c = ChatGPT;\nexport default ChatGPT;\nvar _c;\n$RefreshReg$(_c, \"ChatGPT\");","map":{"version":3,"names":["useState","useEffect","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","API_KEY","ChatGPT","_s","messages","setMessages","message","sentTime","sender","isTyping","setIsTyping","handleSendRequest","newMessage","direction","prevMessages","_response$choices$","_response$choices$$me","response","processMessageToChatGPT","content","choices","chatGPTResponse","error","console","chatMessages","apiMessages","map","messageObject","role","apiRequestBody","fetch","method","headers","body","JSON","stringify","json","className","children","style","position","height","width","scrollBehavior","typingIndicator","fileName","_jsxFileName","lineNumber","columnNumber","i","log","model","placeholder","onSend","_c","$RefreshReg$"],"sources":["/Users/axelsm/Desktop/Fall23/Software Engineering/react_trivia_app/src/hooks/ChatGPT.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const CHATGPT_API_URL = 'https://api.openai.com/v1/chat/completions'; \n\n// require('dotenv').config();\n// const apiKey = process.env.API_KEY;\n\n// const ChatGPT = () => {\n//   const [userInput, setUserInput] = useState('');\n//   const [chatGPTResponse, setChatGPTResponse] = useState('');\n\n//   const generateChatGPTResponse = async () => {\n//     try{\n//         const response = await axios.post(\n//             CHATGPT_API_URL,\n//             {\n//                 model: 'gpt-3.5-turbo', \n//                 messages: [\n//                 { role: 'system', content: 'You are a helpful assistant.',},\n//                 { role: 'user', content: userInput, },\n//               ],\n//             }, {\n//                 headers: {\n//                     'Content-Type' : 'appllication/json',\n//                     'Authorization' : apiKey,\n//                 },\n//                 resolve: {\n//                     fallback: {\n//                       \"path\": require.resolve(\"path-browserify\"),\n//                       \"os\": require.resolve(\"os-browserify/browser\"),\n//                       \"crypto\": require.resolve(\"crypto-browserify\")\n//                     }\n//                 },\n//             },\n//         );\n//         setChatGPTResponse(response.data.choices[0].message.content);\n//     } catch (error){\n//         console.error('Error generating ChatGPT response:', error.response ? error.response.data : error.message);\n//     }\n//   }\n\n//   return (\n//     <div>\n//       <h1>ChatGPT React Example</h1>\n//       <div>\n//         <label>User Input:</label>\n//         <input\n//           type=\"text\"\n//           value={userInput}\n//           onChange={(e) => setUserInput(e.target.value)}\n//         />\n//       </div>\n//       <button onClick={generateChatGPTResponse}>Generate Response</button>\n//       <div>\n//         <h3>ChatGPT Response:</h3>\n//         <p>{chatGPTResponse}</p>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatGPT;\n\nimport { useState, useEffect }  from 'react';\n// import './App.css';\n// import '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport {\n  MainContainer,\n  ChatContainer,\n  MessageList,\n  Message,\n  MessageInput,\n  TypingIndicator,\n} from '@chatscope/chat-ui-kit-react';\n\nconst API_KEY =\"YOUR_API_KEY_HERE\"\n\nconst ChatGPT = () => {\n  const [messages, setMessages] = useState([\n    {\n      message: \"Hello, I'm ChatGPT! Ask me anything!\",\n      sentTime: \"just now\",\n      sender: \"ChatGPT\",\n    },\n  ]);\n  const [isTyping, setIsTyping] = useState(false);\n\n  const handleSendRequest = async (message) => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\",\n    };\n\n    setMessages((prevMessages) => [...prevMessages, newMessage]);\n    setIsTyping(true);\n\n    try {\n      const response = await processMessageToChatGPT([...messages, newMessage]);\n      const content = response.choices[0]?.message?.content;\n      if (content) {\n        const chatGPTResponse = {\n          message: content,\n          sender: \"ChatGPT\",\n        };\n        setMessages((prevMessages) => [...prevMessages, chatGPTResponse]);\n      }\n    } catch (error) {\n      console.error(\"Error processing message:\", error);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  async function processMessageToChatGPT(chatMessages) {\n    const apiMessages = chatMessages.map((messageObject) => {\n      const role = messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\";\n      return { role, content: messageObject.message };\n    });\n\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [\n        { role: \"system\", content: \"I'm a Student using ChatGPT for learning\" },\n        ...apiMessages,\n      ],\n    };\n\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(apiRequestBody),\n    });\n\n    return response.json();\n  }\n\n  return (\n    <div className=\"App\">\n      <div style={{ position:\"relative\", height: \"800px\", width: \"700px\"  }}>\n        <MainContainer>\n          <ChatContainer>       \n            <MessageList \n              scrollBehavior=\"smooth\" \n              typingIndicator={isTyping ? <TypingIndicator content=\"ChatGPT is typing\" /> : null}\n            >\n              {messages.map((message, i) => {\n                console.log(message)\n                return <Message key={i} model={message} />\n              })}\n            </MessageList>\n            <MessageInput placeholder=\"Send a Message\" onSend={handleSendRequest} />        \n          </ChatContainer>\n        </MainContainer>\n      </div>\n    </div>\n  )\n}\n\nexport default ChatGPT;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}