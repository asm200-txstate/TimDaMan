{"ast":null,"code":"// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const CHATGPT_API_URL = 'https://api.openai.com/v1/chat/completions'; \n\n// require('dotenv').config();\n// const apiKey = process.env.API_KEY;\n\n// const ChatGPT = () => {\n//   const [userInput, setUserInput] = useState('');\n//   const [chatGPTResponse, setChatGPTResponse] = useState('');\n\n//   const generateChatGPTResponse = async () => {\n//     try{\n//         const response = await axios.post(\n//             CHATGPT_API_URL,\n//             {\n//                 model: 'gpt-3.5-turbo', \n//                 messages: [\n//                 { role: 'system', content: 'You are a helpful assistant.',},\n//                 { role: 'user', content: userInput, },\n//               ],\n//             }, {\n//                 headers: {\n//                     'Content-Type' : 'appllication/json',\n//                     'Authorization' : apiKey,\n//                 },\n//                 resolve: {\n//                     fallback: {\n//                       \"path\": require.resolve(\"path-browserify\"),\n//                       \"os\": require.resolve(\"os-browserify/browser\"),\n//                       \"crypto\": require.resolve(\"crypto-browserify\")\n//                     }\n//                 },\n//             },\n//         );\n//         setChatGPTResponse(response.data.choices[0].message.content);\n//     } catch (error){\n//         console.error('Error generating ChatGPT response:', error.response ? error.response.data : error.message);\n//     }\n//   }\n\n//   return (\n//     <div>\n//       <h1>ChatGPT React Example</h1>\n//       <div>\n//         <label>User Input:</label>\n//         <input\n//           type=\"text\"\n//           value={userInput}\n//           onChange={(e) => setUserInput(e.target.value)}\n//         />\n//       </div>\n//       <button onClick={generateChatGPTResponse}>Generate Response</button>\n//       <div>\n//         <h3>ChatGPT Response:</h3>\n//         <p>{chatGPTResponse}</p>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatGPT;\n// Import necessary modules\nconst OpenAI = require('openai');\nconst readline = require('readline');\n\n// Initialize OpenAI SDK\nconst openai = new OpenAI('YOUR_OPENAI_API_KEY');\n\n// Function to generate a response from ChatGPT\nasync function generateResponse(userInput) {\n  try {\n    const completion = await openai.complete({\n      engine: 'davinci',\n      // Choose your preferred engine\n      prompt: userInput,\n      maxTokens: 150 // Define the maximum tokens for the response\n    });\n\n    const generatedText = completion.data.choices[0].text.trim();\n    return generatedText;\n  } catch (error) {\n    console.error('Error:', error);\n    return 'Sorry, something went wrong.';\n  }\n}\n\n// Function to handle user input and display responses\nasync function handleUserInput(userInput) {\n  // Send user input to ChatGPT for a response\n  const response = await generateResponse(userInput);\n\n  // Display the response in the console\n  console.log('Generated response:', response);\n}\n\n// Set up readline interface to interact with the user via command line\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\n// Ask for user input and handle it\nfunction askForInput() {\n  rl.question('You: ', async userInput => {\n    await handleUserInput(userInput);\n    askForInput(); // Ask for input again after handling the previous one\n  });\n}\n\n// Start the conversation\nconsole.log('ChatGPT: Hello! How can I assist you today?');\naskForInput(); // Start asking for user input\n\n// Handle Ctrl+C to gracefully exit the program\nprocess.on('SIGINT', () => {\n  console.log('\\nExiting ChatGPT...');\n  rl.close();\n  process.exit(0);\n});","map":{"version":3,"names":["OpenAI","require","readline","openai","generateResponse","userInput","completion","complete","engine","prompt","maxTokens","generatedText","data","choices","text","trim","error","console","handleUserInput","response","log","rl","createInterface","input","process","stdin","output","stdout","askForInput","question","on","close","exit"],"sources":["/Users/axelsm/Desktop/Fall23/Software Engineering/react_trivia_app/src/hooks/ChatGPT.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const CHATGPT_API_URL = 'https://api.openai.com/v1/chat/completions'; \n\n// require('dotenv').config();\n// const apiKey = process.env.API_KEY;\n\n// const ChatGPT = () => {\n//   const [userInput, setUserInput] = useState('');\n//   const [chatGPTResponse, setChatGPTResponse] = useState('');\n\n//   const generateChatGPTResponse = async () => {\n//     try{\n//         const response = await axios.post(\n//             CHATGPT_API_URL,\n//             {\n//                 model: 'gpt-3.5-turbo', \n//                 messages: [\n//                 { role: 'system', content: 'You are a helpful assistant.',},\n//                 { role: 'user', content: userInput, },\n//               ],\n//             }, {\n//                 headers: {\n//                     'Content-Type' : 'appllication/json',\n//                     'Authorization' : apiKey,\n//                 },\n//                 resolve: {\n//                     fallback: {\n//                       \"path\": require.resolve(\"path-browserify\"),\n//                       \"os\": require.resolve(\"os-browserify/browser\"),\n//                       \"crypto\": require.resolve(\"crypto-browserify\")\n//                     }\n//                 },\n//             },\n//         );\n//         setChatGPTResponse(response.data.choices[0].message.content);\n//     } catch (error){\n//         console.error('Error generating ChatGPT response:', error.response ? error.response.data : error.message);\n//     }\n//   }\n\n//   return (\n//     <div>\n//       <h1>ChatGPT React Example</h1>\n//       <div>\n//         <label>User Input:</label>\n//         <input\n//           type=\"text\"\n//           value={userInput}\n//           onChange={(e) => setUserInput(e.target.value)}\n//         />\n//       </div>\n//       <button onClick={generateChatGPTResponse}>Generate Response</button>\n//       <div>\n//         <h3>ChatGPT Response:</h3>\n//         <p>{chatGPTResponse}</p>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatGPT;\n// Import necessary modules\nconst OpenAI = require('openai');\nconst readline = require('readline');\n\n// Initialize OpenAI SDK\nconst openai = new OpenAI('YOUR_OPENAI_API_KEY');\n\n// Function to generate a response from ChatGPT\nasync function generateResponse(userInput) {\n  try {\n    const completion = await openai.complete({\n      engine: 'davinci', // Choose your preferred engine\n      prompt: userInput,\n      maxTokens: 150 // Define the maximum tokens for the response\n    });\n\n    const generatedText = completion.data.choices[0].text.trim();\n    return generatedText;\n  } catch (error) {\n    console.error('Error:', error);\n    return 'Sorry, something went wrong.';\n  }\n}\n\n// Function to handle user input and display responses\nasync function handleUserInput(userInput) {\n  // Send user input to ChatGPT for a response\n  const response = await generateResponse(userInput);\n\n  // Display the response in the console\n  console.log('Generated response:', response);\n}\n\n// Set up readline interface to interact with the user via command line\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\n// Ask for user input and handle it\nfunction askForInput() {\n  rl.question('You: ', async (userInput) => {\n    await handleUserInput(userInput);\n    askForInput(); // Ask for input again after handling the previous one\n  });\n}\n\n// Start the conversation\nconsole.log('ChatGPT: Hello! How can I assist you today?');\naskForInput(); // Start asking for user input\n\n// Handle Ctrl+C to gracefully exit the program\nprocess.on('SIGINT', () => {\n  console.log('\\nExiting ChatGPT...');\n  rl.close();\n  process.exit(0);\n});\n"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;;AAEpC;AACA,MAAME,MAAM,GAAG,IAAIH,MAAM,CAAC,qBAAqB,CAAC;;AAEhD;AACA,eAAeI,gBAAgBA,CAACC,SAAS,EAAE;EACzC,IAAI;IACF,MAAMC,UAAU,GAAG,MAAMH,MAAM,CAACI,QAAQ,CAAC;MACvCC,MAAM,EAAE,SAAS;MAAE;MACnBC,MAAM,EAAEJ,SAAS;MACjBK,SAAS,EAAE,GAAG,CAAC;IACjB,CAAC,CAAC;;IAEF,MAAMC,aAAa,GAAGL,UAAU,CAACM,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC;IAC5D,OAAOJ,aAAa;EACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAO,8BAA8B;EACvC;AACF;;AAEA;AACA,eAAeE,eAAeA,CAACb,SAAS,EAAE;EACxC;EACA,MAAMc,QAAQ,GAAG,MAAMf,gBAAgB,CAACC,SAAS,CAAC;;EAElD;EACAY,OAAO,CAACG,GAAG,CAAC,qBAAqB,EAAED,QAAQ,CAAC;AAC9C;;AAEA;AACA,MAAME,EAAE,GAAGnB,QAAQ,CAACoB,eAAe,CAAC;EAClCC,KAAK,EAAEC,OAAO,CAACC,KAAK;EACpBC,MAAM,EAAEF,OAAO,CAACG;AAClB,CAAC,CAAC;;AAEF;AACA,SAASC,WAAWA,CAAA,EAAG;EACrBP,EAAE,CAACQ,QAAQ,CAAC,OAAO,EAAE,MAAOxB,SAAS,IAAK;IACxC,MAAMa,eAAe,CAACb,SAAS,CAAC;IAChCuB,WAAW,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC;AACJ;;AAEA;AACAX,OAAO,CAACG,GAAG,CAAC,6CAA6C,CAAC;AAC1DQ,WAAW,CAAC,CAAC,CAAC,CAAC;;AAEf;AACAJ,OAAO,CAACM,EAAE,CAAC,QAAQ,EAAE,MAAM;EACzBb,OAAO,CAACG,GAAG,CAAC,sBAAsB,CAAC;EACnCC,EAAE,CAACU,KAAK,CAAC,CAAC;EACVP,OAAO,CAACQ,IAAI,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}