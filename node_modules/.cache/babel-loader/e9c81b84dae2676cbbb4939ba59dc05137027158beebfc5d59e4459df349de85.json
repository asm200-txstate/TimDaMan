{"ast":null,"code":"var _jsxFileName = \"/Users/axelsm/Desktop/Fall23/Software Engineering/react_trivia_app/src/hooks/ChatGPT.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const CHATGPT_API_URL = 'https://api.openai.com/v1/chat/completions'; \n\n// require('dotenv').config();\n// const apiKey = process.env.API_KEY;\n\n// const ChatGPT = () => {\n//   const [userInput, setUserInput] = useState('');\n//   const [chatGPTResponse, setChatGPTResponse] = useState('');\n\n//   const generateChatGPTResponse = async () => {\n//     try{\n//         const response = await axios.post(\n//             CHATGPT_API_URL,\n//             {\n//                 model: 'gpt-3.5-turbo', \n//                 messages: [\n//                 { role: 'system', content: 'You are a helpful assistant.',},\n//                 { role: 'user', content: userInput, },\n//               ],\n//             }, {\n//                 headers: {\n//                     'Content-Type' : 'appllication/json',\n//                     'Authorization' : apiKey,\n//                 },\n//                 resolve: {\n//                     fallback: {\n//                       \"path\": require.resolve(\"path-browserify\"),\n//                       \"os\": require.resolve(\"os-browserify/browser\"),\n//                       \"crypto\": require.resolve(\"crypto-browserify\")\n//                     }\n//                 },\n//             },\n//         );\n//         setChatGPTResponse(response.data.choices[0].message.content);\n//     } catch (error){\n//         console.error('Error generating ChatGPT response:', error.response ? error.response.data : error.message);\n//     }\n//   }\n\n//   return (\n//     <div>\n//       <h1>ChatGPT React Example</h1>\n//       <div>\n//         <label>User Input:</label>\n//         <input\n//           type=\"text\"\n//           value={userInput}\n//           onChange={(e) => setUserInput(e.target.value)}\n//         />\n//       </div>\n//       <button onClick={generateChatGPTResponse}>Generate Response</button>\n//       <div>\n//         <h3>ChatGPT Response:</h3>\n//         <p>{chatGPTResponse}</p>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatGPT;\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CHATGPT_API_URL = 'https://api.openai.com/v1/chat/completions';\n\n// require('dotenv').config(); \nconst apiKey = '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'; // process.env.API_KEY;\n\nconst ChatGPT = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [chatGPTResponse, setChatGPTResponse] = useState('');\n  const generateChatGPTResponse = async () => {\n    try {\n      const response = await axios.post(CHATGPT_API_URL, {\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'system',\n          content: 'You are a helpful assistant.'\n        }, {\n          role: 'user',\n          content: userInput\n        }]\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          // Fix typo here\n          'Authorization': apiKey\n        }\n      });\n      setChatGPTResponse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error generating ChatGPT response:', error.response ? error.response.data : error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ChatGPT React Example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"User Input:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateChatGPTResponse,\n      children: \"Generate Response\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"ChatGPT Response:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: chatGPTResponse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatGPT, \"v5QNjhZuff+1iUqHUY41VsQWtLE=\");\n_c = ChatGPT;\nexport default ChatGPT;\nvar _c;\n$RefreshReg$(_c, \"ChatGPT\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","CHATGPT_API_URL","apiKey","ChatGPT","_s","userInput","setUserInput","chatGPTResponse","setChatGPTResponse","generateChatGPTResponse","response","post","model","messages","role","content","headers","data","choices","message","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/axelsm/Desktop/Fall23/Software Engineering/react_trivia_app/src/hooks/ChatGPT.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const CHATGPT_API_URL = 'https://api.openai.com/v1/chat/completions'; \n\n// require('dotenv').config();\n// const apiKey = process.env.API_KEY;\n\n// const ChatGPT = () => {\n//   const [userInput, setUserInput] = useState('');\n//   const [chatGPTResponse, setChatGPTResponse] = useState('');\n\n//   const generateChatGPTResponse = async () => {\n//     try{\n//         const response = await axios.post(\n//             CHATGPT_API_URL,\n//             {\n//                 model: 'gpt-3.5-turbo', \n//                 messages: [\n//                 { role: 'system', content: 'You are a helpful assistant.',},\n//                 { role: 'user', content: userInput, },\n//               ],\n//             }, {\n//                 headers: {\n//                     'Content-Type' : 'appllication/json',\n//                     'Authorization' : apiKey,\n//                 },\n//                 resolve: {\n//                     fallback: {\n//                       \"path\": require.resolve(\"path-browserify\"),\n//                       \"os\": require.resolve(\"os-browserify/browser\"),\n//                       \"crypto\": require.resolve(\"crypto-browserify\")\n//                     }\n//                 },\n//             },\n//         );\n//         setChatGPTResponse(response.data.choices[0].message.content);\n//     } catch (error){\n//         console.error('Error generating ChatGPT response:', error.response ? error.response.data : error.message);\n//     }\n//   }\n\n//   return (\n//     <div>\n//       <h1>ChatGPT React Example</h1>\n//       <div>\n//         <label>User Input:</label>\n//         <input\n//           type=\"text\"\n//           value={userInput}\n//           onChange={(e) => setUserInput(e.target.value)}\n//         />\n//       </div>\n//       <button onClick={generateChatGPTResponse}>Generate Response</button>\n//       <div>\n//         <h3>ChatGPT Response:</h3>\n//         <p>{chatGPTResponse}</p>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatGPT;\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\nconst CHATGPT_API_URL = 'https://api.openai.com/v1/chat/completions'; \n\n// require('dotenv').config(); \nconst apiKey = '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' // process.env.API_KEY;\n\nconst ChatGPT = () => {\n  const [userInput, setUserInput] = useState('');\n  const [chatGPTResponse, setChatGPTResponse] = useState('');\n\n  const generateChatGPTResponse = async () => {\n    try {\n      const response = await axios.post(\n        CHATGPT_API_URL,\n        {\n          model: 'gpt-3.5-turbo', \n          messages: [\n            { role: 'system', content: 'You are a helpful assistant.' },\n            { role: 'user', content: userInput },\n          ],\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json', // Fix typo here\n            'Authorization': apiKey,\n          },\n        },\n      );\n      setChatGPTResponse(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error generating ChatGPT response:', error.response ? error.response.data : error.message);\n    }\n  };\n\n  return (\n    <div>\n      <h1>ChatGPT React Example</h1>\n      <div>\n        <label>User Input:</label>\n        <input\n          type=\"text\"\n          value={userInput}\n          onChange={(e) => setUserInput(e.target.value)}\n        />\n      </div>\n      <button onClick={generateChatGPTResponse}>Generate Response</button>\n        <h3>ChatGPT Response:</h3>\n        <p>{chatGPTResponse}</p>\n      {/* <div>\n        <h3>ChatGPT Response:</h3>\n        <p>{chatGPTResponse}</p>\n      </div> */}\n    </div>\n  );\n};\n\nexport default ChatGPT;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}